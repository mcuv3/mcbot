// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: publicService.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublicServiceClient is the client API for PublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicServiceClient interface {
	GetAssetPairs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AssetPairsResponse, error)
	GetAssetPair(ctx context.Context, in *AssetPairRequest, opts ...grpc.CallOption) (*AssetPairResponse, error)
	GetAssets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AssetsResponse, error)
	GetAsset(ctx context.Context, in *AssetRequest, opts ...grpc.CallOption) (*AssetResponse, error)
	GetOrderbooks(ctx context.Context, in *OrderbookRequest, opts ...grpc.CallOption) (*OrderbookResponse, error)
	GetTickers(ctx context.Context, in *TickersRequest, opts ...grpc.CallOption) (*TickersResponse, error)
	GetPrices(ctx context.Context, in *PricesRequest, opts ...grpc.CallOption) (*PricesResponse, error)
	GetPublicTrades(ctx context.Context, in *PublicTradesRequest, opts ...grpc.CallOption) (*PublicTradeUpdate, error)
	GetPriceUpdates(ctx context.Context, in *PriceUpdatesRequest, opts ...grpc.CallOption) (PublicService_GetPriceUpdatesClient, error)
	GetTickerUpdates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (PublicService_GetTickerUpdatesClient, error)
	GetOrderbookUpdates(ctx context.Context, in *OrderbookUpdatesRequest, opts ...grpc.CallOption) (PublicService_GetOrderbookUpdatesClient, error)
	GetPublicTradeUpdates(ctx context.Context, in *PublicTradesUpdatesRequest, opts ...grpc.CallOption) (PublicService_GetPublicTradeUpdatesClient, error)
}

type publicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicServiceClient(cc grpc.ClientConnInterface) PublicServiceClient {
	return &publicServiceClient{cc}
}

func (c *publicServiceClient) GetAssetPairs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AssetPairsResponse, error) {
	out := new(AssetPairsResponse)
	err := c.cc.Invoke(ctx, "/hft.PublicService/GetAssetPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetAssetPair(ctx context.Context, in *AssetPairRequest, opts ...grpc.CallOption) (*AssetPairResponse, error) {
	out := new(AssetPairResponse)
	err := c.cc.Invoke(ctx, "/hft.PublicService/GetAssetPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetAssets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AssetsResponse, error) {
	out := new(AssetsResponse)
	err := c.cc.Invoke(ctx, "/hft.PublicService/GetAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetAsset(ctx context.Context, in *AssetRequest, opts ...grpc.CallOption) (*AssetResponse, error) {
	out := new(AssetResponse)
	err := c.cc.Invoke(ctx, "/hft.PublicService/GetAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetOrderbooks(ctx context.Context, in *OrderbookRequest, opts ...grpc.CallOption) (*OrderbookResponse, error) {
	out := new(OrderbookResponse)
	err := c.cc.Invoke(ctx, "/hft.PublicService/GetOrderbooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetTickers(ctx context.Context, in *TickersRequest, opts ...grpc.CallOption) (*TickersResponse, error) {
	out := new(TickersResponse)
	err := c.cc.Invoke(ctx, "/hft.PublicService/GetTickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetPrices(ctx context.Context, in *PricesRequest, opts ...grpc.CallOption) (*PricesResponse, error) {
	out := new(PricesResponse)
	err := c.cc.Invoke(ctx, "/hft.PublicService/GetPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetPublicTrades(ctx context.Context, in *PublicTradesRequest, opts ...grpc.CallOption) (*PublicTradeUpdate, error) {
	out := new(PublicTradeUpdate)
	err := c.cc.Invoke(ctx, "/hft.PublicService/GetPublicTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetPriceUpdates(ctx context.Context, in *PriceUpdatesRequest, opts ...grpc.CallOption) (PublicService_GetPriceUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[0], "/hft.PublicService/GetPriceUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceGetPriceUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PublicService_GetPriceUpdatesClient interface {
	Recv() (*PriceUpdate, error)
	grpc.ClientStream
}

type publicServiceGetPriceUpdatesClient struct {
	grpc.ClientStream
}

func (x *publicServiceGetPriceUpdatesClient) Recv() (*PriceUpdate, error) {
	m := new(PriceUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicServiceClient) GetTickerUpdates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (PublicService_GetTickerUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[1], "/hft.PublicService/GetTickerUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceGetTickerUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PublicService_GetTickerUpdatesClient interface {
	Recv() (*TickerUpdate, error)
	grpc.ClientStream
}

type publicServiceGetTickerUpdatesClient struct {
	grpc.ClientStream
}

func (x *publicServiceGetTickerUpdatesClient) Recv() (*TickerUpdate, error) {
	m := new(TickerUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicServiceClient) GetOrderbookUpdates(ctx context.Context, in *OrderbookUpdatesRequest, opts ...grpc.CallOption) (PublicService_GetOrderbookUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[2], "/hft.PublicService/GetOrderbookUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceGetOrderbookUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PublicService_GetOrderbookUpdatesClient interface {
	Recv() (*Orderbook, error)
	grpc.ClientStream
}

type publicServiceGetOrderbookUpdatesClient struct {
	grpc.ClientStream
}

func (x *publicServiceGetOrderbookUpdatesClient) Recv() (*Orderbook, error) {
	m := new(Orderbook)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicServiceClient) GetPublicTradeUpdates(ctx context.Context, in *PublicTradesUpdatesRequest, opts ...grpc.CallOption) (PublicService_GetPublicTradeUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[3], "/hft.PublicService/GetPublicTradeUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceGetPublicTradeUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PublicService_GetPublicTradeUpdatesClient interface {
	Recv() (*PublicTradeUpdate, error)
	grpc.ClientStream
}

type publicServiceGetPublicTradeUpdatesClient struct {
	grpc.ClientStream
}

func (x *publicServiceGetPublicTradeUpdatesClient) Recv() (*PublicTradeUpdate, error) {
	m := new(PublicTradeUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PublicServiceServer is the server API for PublicService service.
// All implementations should embed UnimplementedPublicServiceServer
// for forward compatibility
type PublicServiceServer interface {
	GetAssetPairs(context.Context, *emptypb.Empty) (*AssetPairsResponse, error)
	GetAssetPair(context.Context, *AssetPairRequest) (*AssetPairResponse, error)
	GetAssets(context.Context, *emptypb.Empty) (*AssetsResponse, error)
	GetAsset(context.Context, *AssetRequest) (*AssetResponse, error)
	GetOrderbooks(context.Context, *OrderbookRequest) (*OrderbookResponse, error)
	GetTickers(context.Context, *TickersRequest) (*TickersResponse, error)
	GetPrices(context.Context, *PricesRequest) (*PricesResponse, error)
	GetPublicTrades(context.Context, *PublicTradesRequest) (*PublicTradeUpdate, error)
	GetPriceUpdates(*PriceUpdatesRequest, PublicService_GetPriceUpdatesServer) error
	GetTickerUpdates(*emptypb.Empty, PublicService_GetTickerUpdatesServer) error
	GetOrderbookUpdates(*OrderbookUpdatesRequest, PublicService_GetOrderbookUpdatesServer) error
	GetPublicTradeUpdates(*PublicTradesUpdatesRequest, PublicService_GetPublicTradeUpdatesServer) error
}

// UnimplementedPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPublicServiceServer struct {
}

func (UnimplementedPublicServiceServer) GetAssetPairs(context.Context, *emptypb.Empty) (*AssetPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetPairs not implemented")
}
func (UnimplementedPublicServiceServer) GetAssetPair(context.Context, *AssetPairRequest) (*AssetPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetPair not implemented")
}
func (UnimplementedPublicServiceServer) GetAssets(context.Context, *emptypb.Empty) (*AssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssets not implemented")
}
func (UnimplementedPublicServiceServer) GetAsset(context.Context, *AssetRequest) (*AssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedPublicServiceServer) GetOrderbooks(context.Context, *OrderbookRequest) (*OrderbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderbooks not implemented")
}
func (UnimplementedPublicServiceServer) GetTickers(context.Context, *TickersRequest) (*TickersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickers not implemented")
}
func (UnimplementedPublicServiceServer) GetPrices(context.Context, *PricesRequest) (*PricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrices not implemented")
}
func (UnimplementedPublicServiceServer) GetPublicTrades(context.Context, *PublicTradesRequest) (*PublicTradeUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicTrades not implemented")
}
func (UnimplementedPublicServiceServer) GetPriceUpdates(*PriceUpdatesRequest, PublicService_GetPriceUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPriceUpdates not implemented")
}
func (UnimplementedPublicServiceServer) GetTickerUpdates(*emptypb.Empty, PublicService_GetTickerUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTickerUpdates not implemented")
}
func (UnimplementedPublicServiceServer) GetOrderbookUpdates(*OrderbookUpdatesRequest, PublicService_GetOrderbookUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderbookUpdates not implemented")
}
func (UnimplementedPublicServiceServer) GetPublicTradeUpdates(*PublicTradesUpdatesRequest, PublicService_GetPublicTradeUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPublicTradeUpdates not implemented")
}

// UnsafePublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicServiceServer will
// result in compilation errors.
type UnsafePublicServiceServer interface {
	mustEmbedUnimplementedPublicServiceServer()
}

func RegisterPublicServiceServer(s grpc.ServiceRegistrar, srv PublicServiceServer) {
	s.RegisterService(&PublicService_ServiceDesc, srv)
}

func _PublicService_GetAssetPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetAssetPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hft.PublicService/GetAssetPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetAssetPairs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetAssetPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetAssetPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hft.PublicService/GetAssetPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetAssetPair(ctx, req.(*AssetPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hft.PublicService/GetAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetAssets(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hft.PublicService/GetAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetAsset(ctx, req.(*AssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetOrderbooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetOrderbooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hft.PublicService/GetOrderbooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetOrderbooks(ctx, req.(*OrderbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetTickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TickersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetTickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hft.PublicService/GetTickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetTickers(ctx, req.(*TickersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hft.PublicService/GetPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetPrices(ctx, req.(*PricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetPublicTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetPublicTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hft.PublicService/GetPublicTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetPublicTrades(ctx, req.(*PublicTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetPriceUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PriceUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicServiceServer).GetPriceUpdates(m, &publicServiceGetPriceUpdatesServer{stream})
}

type PublicService_GetPriceUpdatesServer interface {
	Send(*PriceUpdate) error
	grpc.ServerStream
}

type publicServiceGetPriceUpdatesServer struct {
	grpc.ServerStream
}

func (x *publicServiceGetPriceUpdatesServer) Send(m *PriceUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _PublicService_GetTickerUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicServiceServer).GetTickerUpdates(m, &publicServiceGetTickerUpdatesServer{stream})
}

type PublicService_GetTickerUpdatesServer interface {
	Send(*TickerUpdate) error
	grpc.ServerStream
}

type publicServiceGetTickerUpdatesServer struct {
	grpc.ServerStream
}

func (x *publicServiceGetTickerUpdatesServer) Send(m *TickerUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _PublicService_GetOrderbookUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderbookUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicServiceServer).GetOrderbookUpdates(m, &publicServiceGetOrderbookUpdatesServer{stream})
}

type PublicService_GetOrderbookUpdatesServer interface {
	Send(*Orderbook) error
	grpc.ServerStream
}

type publicServiceGetOrderbookUpdatesServer struct {
	grpc.ServerStream
}

func (x *publicServiceGetOrderbookUpdatesServer) Send(m *Orderbook) error {
	return x.ServerStream.SendMsg(m)
}

func _PublicService_GetPublicTradeUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PublicTradesUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicServiceServer).GetPublicTradeUpdates(m, &publicServiceGetPublicTradeUpdatesServer{stream})
}

type PublicService_GetPublicTradeUpdatesServer interface {
	Send(*PublicTradeUpdate) error
	grpc.ServerStream
}

type publicServiceGetPublicTradeUpdatesServer struct {
	grpc.ServerStream
}

func (x *publicServiceGetPublicTradeUpdatesServer) Send(m *PublicTradeUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// PublicService_ServiceDesc is the grpc.ServiceDesc for PublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hft.PublicService",
	HandlerType: (*PublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAssetPairs",
			Handler:    _PublicService_GetAssetPairs_Handler,
		},
		{
			MethodName: "GetAssetPair",
			Handler:    _PublicService_GetAssetPair_Handler,
		},
		{
			MethodName: "GetAssets",
			Handler:    _PublicService_GetAssets_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _PublicService_GetAsset_Handler,
		},
		{
			MethodName: "GetOrderbooks",
			Handler:    _PublicService_GetOrderbooks_Handler,
		},
		{
			MethodName: "GetTickers",
			Handler:    _PublicService_GetTickers_Handler,
		},
		{
			MethodName: "GetPrices",
			Handler:    _PublicService_GetPrices_Handler,
		},
		{
			MethodName: "GetPublicTrades",
			Handler:    _PublicService_GetPublicTrades_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPriceUpdates",
			Handler:       _PublicService_GetPriceUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTickerUpdates",
			Handler:       _PublicService_GetTickerUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetOrderbookUpdates",
			Handler:       _PublicService_GetOrderbookUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPublicTradeUpdates",
			Handler:       _PublicService_GetPublicTradeUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "publicService.proto",
}
