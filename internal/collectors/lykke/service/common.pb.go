// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: common.proto

package service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCode int32

const (
	ErrorCode_success         ErrorCode = 0
	ErrorCode_runtimeError    ErrorCode = 1001
	ErrorCode_itemNotFound    ErrorCode = 1100
	ErrorCode_invalidField    ErrorCode = 1101
	ErrorCode_actionForbidden ErrorCode = 1102
	//meErrors
	ErrorCode_meBadRequest                      ErrorCode = 2000
	ErrorCode_meLowBalance                      ErrorCode = 2001
	ErrorCode_meAlreadyProcessed                ErrorCode = 2002
	ErrorCode_meDisabledAsset                   ErrorCode = 2003
	ErrorCode_meUnknownAsset                    ErrorCode = 2004
	ErrorCode_meNoLiquidity                     ErrorCode = 2005
	ErrorCode_meNotEnoughFunds                  ErrorCode = 2006
	ErrorCode_meDust                            ErrorCode = 2007
	ErrorCode_meReservedVolumeHigherThanBalance ErrorCode = 2008
	ErrorCode_meNotFound                        ErrorCode = 2009
	ErrorCode_meBalanceLowerThanReserved        ErrorCode = 2010
	ErrorCode_meLeadToNegativeSpread            ErrorCode = 2011
	ErrorCode_meTooSmallVolume                  ErrorCode = 2012
	ErrorCode_meInvalidFee                      ErrorCode = 2013
	ErrorCode_meInvalidPrice                    ErrorCode = 2014
	ErrorCode_meReplaced                        ErrorCode = 2015
	ErrorCode_meNotFoundPrevious                ErrorCode = 2016
	ErrorCode_meDuplicate                       ErrorCode = 2017
	ErrorCode_meInvalidVolumeAccuracy           ErrorCode = 2018
	ErrorCode_meInvalidPriceAccuracy            ErrorCode = 2019
	ErrorCode_meInvalidVolume                   ErrorCode = 2020
	ErrorCode_meTooHighPriceDeviation           ErrorCode = 2021
	ErrorCode_meInvalidOrderValue               ErrorCode = 2022
	ErrorCode_meRuntime                         ErrorCode = 2023
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:    "success",
		1001: "runtimeError",
		1100: "itemNotFound",
		1101: "invalidField",
		1102: "actionForbidden",
		2000: "meBadRequest",
		2001: "meLowBalance",
		2002: "meAlreadyProcessed",
		2003: "meDisabledAsset",
		2004: "meUnknownAsset",
		2005: "meNoLiquidity",
		2006: "meNotEnoughFunds",
		2007: "meDust",
		2008: "meReservedVolumeHigherThanBalance",
		2009: "meNotFound",
		2010: "meBalanceLowerThanReserved",
		2011: "meLeadToNegativeSpread",
		2012: "meTooSmallVolume",
		2013: "meInvalidFee",
		2014: "meInvalidPrice",
		2015: "meReplaced",
		2016: "meNotFoundPrevious",
		2017: "meDuplicate",
		2018: "meInvalidVolumeAccuracy",
		2019: "meInvalidPriceAccuracy",
		2020: "meInvalidVolume",
		2021: "meTooHighPriceDeviation",
		2022: "meInvalidOrderValue",
		2023: "meRuntime",
	}
	ErrorCode_value = map[string]int32{
		"success":                           0,
		"runtimeError":                      1001,
		"itemNotFound":                      1100,
		"invalidField":                      1101,
		"actionForbidden":                   1102,
		"meBadRequest":                      2000,
		"meLowBalance":                      2001,
		"meAlreadyProcessed":                2002,
		"meDisabledAsset":                   2003,
		"meUnknownAsset":                    2004,
		"meNoLiquidity":                     2005,
		"meNotEnoughFunds":                  2006,
		"meDust":                            2007,
		"meReservedVolumeHigherThanBalance": 2008,
		"meNotFound":                        2009,
		"meBalanceLowerThanReserved":        2010,
		"meLeadToNegativeSpread":            2011,
		"meTooSmallVolume":                  2012,
		"meInvalidFee":                      2013,
		"meInvalidPrice":                    2014,
		"meReplaced":                        2015,
		"meNotFoundPrevious":                2016,
		"meDuplicate":                       2017,
		"meInvalidVolumeAccuracy":           2018,
		"meInvalidPriceAccuracy":            2019,
		"meInvalidVolume":                   2020,
		"meTooHighPriceDeviation":           2021,
		"meInvalidOrderValue":               2022,
		"meRuntime":                         2023,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ErrorCode         `protobuf:"varint,1,opt,name=code,proto3,enum=hft.common.ErrorCode" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Fields  map[string]string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_success
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x68, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0xbe, 0x01, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x68, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x66, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x94, 0x05, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xe9, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x69, 0x74, 0x65,
	0x6d, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xcc, 0x08, 0x12, 0x11, 0x0a, 0x0c,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10, 0xcd, 0x08, 0x12,
	0x14, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x10, 0xce, 0x08, 0x12, 0x11, 0x0a, 0x0c, 0x6d, 0x65, 0x42, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xd0, 0x0f, 0x12, 0x11, 0x0a, 0x0c, 0x6d, 0x65, 0x4c, 0x6f,
	0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0xd1, 0x0f, 0x12, 0x17, 0x0a, 0x12, 0x6d,
	0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x10, 0xd2, 0x0f, 0x12, 0x14, 0x0a, 0x0f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x10, 0xd3, 0x0f, 0x12, 0x13, 0x0a, 0x0e, 0x6d, 0x65,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x10, 0xd4, 0x0f, 0x12,
	0x12, 0x0a, 0x0d, 0x6d, 0x65, 0x4e, 0x6f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x10, 0xd5, 0x0f, 0x12, 0x15, 0x0a, 0x10, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75,
	0x67, 0x68, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x10, 0xd6, 0x0f, 0x12, 0x0b, 0x0a, 0x06, 0x6d, 0x65,
	0x44, 0x75, 0x73, 0x74, 0x10, 0xd7, 0x0f, 0x12, 0x26, 0x0a, 0x21, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68, 0x65,
	0x72, 0x54, 0x68, 0x61, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0xd8, 0x0f, 0x12,
	0x0f, 0x0a, 0x0a, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xd9, 0x0f,
	0x12, 0x1f, 0x0a, 0x1a, 0x6d, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77,
	0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x10, 0xda,
	0x0f, 0x12, 0x1b, 0x0a, 0x16, 0x6d, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x4e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x10, 0xdb, 0x0f, 0x12, 0x15,
	0x0a, 0x10, 0x6d, 0x65, 0x54, 0x6f, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x10, 0xdc, 0x0f, 0x12, 0x11, 0x0a, 0x0c, 0x6d, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x46, 0x65, 0x65, 0x10, 0xdd, 0x0f, 0x12, 0x13, 0x0a, 0x0e, 0x6d, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0xde, 0x0f, 0x12, 0x0f, 0x0a,
	0x0a, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x10, 0xdf, 0x0f, 0x12, 0x17,
	0x0a, 0x12, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x10, 0xe0, 0x0f, 0x12, 0x10, 0x0a, 0x0b, 0x6d, 0x65, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0xe1, 0x0f, 0x12, 0x1c, 0x0a, 0x17, 0x6d, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x10, 0xe2, 0x0f, 0x12, 0x1b, 0x0a, 0x16, 0x6d, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63,
	0x79, 0x10, 0xe3, 0x0f, 0x12, 0x14, 0x0a, 0x0f, 0x6d, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10, 0xe4, 0x0f, 0x12, 0x1c, 0x0a, 0x17, 0x6d, 0x65,
	0x54, 0x6f, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe5, 0x0f, 0x12, 0x18, 0x0a, 0x13, 0x6d, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10,
	0xe6, 0x0f, 0x12, 0x0e, 0x0a, 0x09, 0x6d, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x10,
	0xe7, 0x0f, 0x42, 0x27, 0x5a, 0x0a, 0x2e, 0x2f, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0xaa, 0x02, 0x18, 0x4c, 0x79, 0x6b, 0x6b, 0x65, 0x2e, 0x48, 0x66, 0x74, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_common_proto_goTypes = []interface{}{
	(ErrorCode)(0), // 0: hft.common.ErrorCode
	(*Error)(nil),  // 1: hft.common.Error
	nil,            // 2: hft.common.Error.FieldsEntry
}
var file_common_proto_depIdxs = []int32{
	0, // 0: hft.common.Error.code:type_name -> hft.common.ErrorCode
	2, // 1: hft.common.Error.fields:type_name -> hft.common.Error.FieldsEntry
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
